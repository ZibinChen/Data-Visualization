-- Setup. DO NOT REMOVE.
.headers on
.separator ','

DROP TABLE IF EXISTS movies;
DROP TABLE IF EXISTS cast;
DROP VIEW IF EXISTS good_collaboration;
DROP TABLE IF EXISTS movie_overview;

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --

-- (a.i) Create tables

-- [insert your SQL statement(s) BELOW this line]

CREATE TABLE movies(
id INT,
name TEXT,
score INT);

CREATE TABLE cast(
movie_id INT,
cast_id INT,
cast_name TEXT);

-- [insert your SQL statement(s) ABOVE this line]

-- [the following statement(s) are for autograding. DO NOT REMOVE.]
.tables
.print '~~~~~'

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --

-- (a.ii) Import data

-- [insert your SQLite command(s) BELOW this line]

.import \movie-name-score.txt movies
.import \movie-cast.txt cast

-- [insert your SQLite command(s) ABOVE this line]

-- [the following statement(s) are for autograding. DO NOT REMOVE.]
.headers off
SELECT COUNT(*) FROM movies;
SELECT COUNT(*) FROM cast;
.headers on
.print '~~~~~'

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --

-- (b) Create indexes

-- [insert your SQL statement(s) BELOW this line]

CREATE INDEX score_index ON movies(score);
CREATE INDEX cast_index ON cast(cast_id);
CREATE INDEX movie_index ON movies(id);

-- [insert your SQL statement(s) ABOVE this line]

-- [the following statement(s) are for autograding. DO NOT REMOVE.]
.indexes
.print '~~~~~'

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --

-- (c) Calculate average score

-- [insert your SQL statement(s) BELOW this line]

SELECT AVG(score) as "average_score" FROM movies WHERE score >= 5;

-- [insert your SQL statement(s) ABOVE this line]

-- [the following statement(s) are for autograding. DO NOT REMOVE.]
.print '~~~~~'

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --

-- (d) Find poor movies

-- [insert your SQL statement(s) BELOW this line]

SELECT id, name, score FROM movies 
ORDER BY score, name ASC
LIMIT 5;

-- [insert your SQL statement(s) ABOVE this line]

-- [the following statement(s) are for autograding. DO NOT REMOVE.]
.print '~~~~~'

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --

-- (e) Find laid back actors

-- [insert your SQL statement(s) BELOW this line]

SELECT cast_id, cast_name, COUNT(movie_id) AS movie_count 
FROM cast 
GROUP BY cast_name
HAVING movie_count = 2 
ORDER BY cast_name ASC
LIMIT 10;


-- [insert your SQL statement(s) ABOVE this line]

-- [the following statement(s) are for autograding. DO NOT REMOVE.]
.print '~~~~~'

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --

-- (f) Get high scoring actors

-- [insert your SQL statement(s) BELOW this line]

SELECT b.cast_id,b.cast_name,AVG(a.score) AS average_score
FROM movies a INNER JOIN cast b ON a.id = b.movie_id
GROUP BY b.cast_name 
HAVING a.score >= 40 AND COUNT(b.movie_id) > 2
ORDER BY average_score DESC, cast_name ASC
limit 10;


-- [insert your SQL statement(s) ABOVE this line]

-- [the following statement(s) are for autograding. DO NOT REMOVE.]
.print '~~~~~'

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --

-- (g) Creating views

-- [insert your SQL statement(s) BELOW this line]

CREATE VIEW good_collaboration AS
SELECT a.cast_member_id1, b.cast_member_id2, COUNT(c.id) AS movie_count, AVG(c.score) AS average_movie_score
FROM (SELECT movie_id, cast_id AS cast_member_id1 FROM cast) a
INNER JOIN (SELECT movie_id, cast_id AS cast_member_id2 FROM cast) b
ON a.movie_id = b.movie_id
INNER JOIN movies c ON c.id = a.movie_id
WHERE a.cast_member_id1 < b.cast_member_id2
GROUP BY a.cast_member_id1, b.cast_member_id2
HAVING movie_count >= 3 AND average_movie_score >= 50;


-- [insert your SQL statement(s) ABOVE this line]

-- [the following statement(s) are for autograding. DO NOT REMOVE.]
.headers off
PRAGMA table_info(good_collaboration);
SELECT AVG(average_movie_score) FROM good_collaboration;
.headers on
.print '~~~~~'

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --

-- (h) Find the best collaborators

-- [insert your SQL statement(s) BELOW this line]

SELECT cast_id, cast_name, AVG(average_movie_score) AS collaboration_score
FROM (SELECT cast_member_id1, average_movie_score FROM good_collaboration
UNION ALL 
SELECT cast_member_id2, average_movie_score FROM good_collaboration) a
INNER JOIN (SELECT DISTINCT cast_id, cast_name FROM cast) b
ON  a.cast_member_id1 = b.cast_id
GROUP BY cast_id
ORDER BY collaboration_score DESC, cast_name ASC
LIMIT 5;


-- [insert your SQL statement(s) ABOVE this line]

-- [the following statement(s) are for autograding. DO NOT REMOVE.]
.print '~~~~~'

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --

-- (i) Create FTS table and import data

-- [insert your SQL statement(s) BELOW this line]

CREATE VIRTUAL TABLE movie_overview 
USING fts4(
id INT,
name TEXT,
year INT,
overview TEXT,
popularity DECIMAL);

.import \movie-overview.txt movie_overview 

-- [insert your SQL statement(s) ABOVE this line]

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --

-- (i.1) Count movies with "fight"

-- [insert your SQL statement(s) BELOW this line]

SELECT COUNT(overview) AS count_overview FROM movie_overview
WHERE overview MATCH '%fight%';

-- [insert your SQL statement(s) ABOVE this line]

-- [the following statement(s) are for autograding. DO NOT REMOVE.]
.print '~~~~~'

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --

-- (i.2) List movies with "love" and "story" nearby

-- [insert your SQL statement(s) BELOW this line]

SELECT id FROM movie_overview
WHERE overview MATCH '%love NEAR/5 story%';

-- [insert your SQL statement(s) ABOVE this line]

-- [the following statement(s) are for autograding. DO NOT REMOVE.]
.print '~~~~~'

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --